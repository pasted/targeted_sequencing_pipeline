# @author Garan Jones
# CnvCaller class: Run the CNV calling scripts
class CnvCaller
	require_relative '../shared/render_script'
	require_relative 'wrapper'

		# @author Garan Jones
		# Use ExomeDepth Rscript generated by the class RenderScript to call the CNV in gender specific batches
  	# @param panel_version [String] String containing the panel version
  	# @param gender [String] Current gender of batched samples to the checked
  	# @param batch [Object] A Batch object containing details on the batch
  	# @param logger [Object] A Ruby Logger object
  	# @return [Array<String, Object>] An array with command exit status and an IO.pipe object
	def exome_depth(panel_version, gender, run_type, batch, logger)
		
			this_wrapper = Wrapper.new
			puts "Running Exome Depth on #{panel_version} samples with #{gender} gender..."
			
			#Generate ExomeDepth Rscript from template 
			this_script = RenderScript.new("#{panel_version}", "#{gender}", run_type, batch)
			script_text = this_script.result
			
			#Write the script to file and set the file permissions
			File.open("#{batch.base_path}/#{batch.batch_id}/scripts/r_scripts/exome_depth_#{panel_version}_#{gender}_#{run_type}.r", 'w'){ |this_file|
				this_file.puts(script_text)
				this_file.chmod(00750)
			}
			
			cmd = "#{batch.rscript_path} #{batch.base_path}/#{batch.batch_id}/scripts/r_scripts/exome_depth_#{panel_version}_#{gender}_#{run_type}.r"
				
			#Add info entry to log to say Wrapper object has been sent command
			logger.info('stage') { "CNV caller :: All #{panel_version} #{gender} #{run_type} samples" }
			output = this_wrapper.run_command(cmd, logger)
			
			#return script_text
			return output
	end
	

end
